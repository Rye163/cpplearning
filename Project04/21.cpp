#include<iostream>
using namespace std;

//4.2.1 构造函数和析构函数
class Person{
public:
	
	//构造函数语法：类名(){}
	//1. 构造函数，没有返回值也不写void
	//2. 函数名称与类名相同
	//3. 构造函数可以有参数，因此可以发生重载
	//4. 程序在调用对象时候会自动调用构造，无须手动调用,而且只会调用一次
	Person(){
		cout << "构造函数的调用" << endl;
	}
	
	//析构函数语法：~类名(){}
	//1. 析构函数，没有返回值也不写void
	//2. 函数名称与类名相同,在名称前加上符号  ~
	//3. 析构函数不可以有参数，因此不可以发生重载
	//4. 程序在对象销毁前会自动调用析构，无须手动调用,而且只会调用一次
	~Person(){
		cout << "析构函数的调用" << endl;
	}

};

//对象的构造与实现是编译器强制要我们做的事情，如果我们不提供构造和析构，编译器会提供一个空实现
void test01(){
	Person p;//在栈上的数据，test01执行完毕后，释放这个对象
}

int main(){
	
	test01();
	
	//Person p;
    //main函数调用时，析构函数可能不会出现
	//原因：函数执行完构造函数后会紧接执行"system("pause");"代码，最后才会执行析构函数
	
	system("pause");
	return 0;
}
